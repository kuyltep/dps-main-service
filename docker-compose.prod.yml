services:
  main:
    image: dps-main-service
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - minio
      - qdrant
    container_name: dps-main-service
    ports:
      - '3001:3001'
    restart: always
    env_file:
      - .env
    networks:
      - dps-network

  sso:
    image: dps-sso-service
    build:
      context: ../dps-sso-service
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - minio
      - qdrant
    container_name: dps-sso-service
    ports:
      - '3002:3002'
    restart: always
    env_file:
      - .env
    networks:
      - dps-network

  vector:
    image: dps-vector-service
    build:
      context: ../dps-qdrant-service
      dockerfile: Dockerfile
    depends_on:
      - minio
      - qdrant
    container_name: dps-vector-service
    ports:
      - '3004:3004'
    restart: always
    env_file:
      - .env
    networks:
      - dps-network

  gateway:
    image: dps-gateway-service
    build:
      context: ../dps-gateway-service
      dockerfile: Dockerfile
    depends_on:
      - main
      - sso
    container_name: dps-gateway-service
    ports:
      - '3000:3000'
    restart: always
    env_file:
      - .env
    networks:
      - dps-network
  
  postgres:
    image: postgres:latest
    container_name: dps_container
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - '5434:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=512MB
               -c effective_cache_size=1GB
               -c maintenance_work_mem=128MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - dps-network
    tty: true
    stdin_open: true

  minio:
    image: minio/minio
    container_name: dps_minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    restart: always
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - dps-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - '6333:6333'
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HOST=0.0.0.0
      - QDRANT__CLUSTER__ENABLED=false
    restart: always
    networks:
      - dps-network

volumes:
  postgres_data:
  minio_data:
  qdrant_data:

networks:
  dps-network:
    driver: bridge
